import logging
from aiogram import Bot, Dispatcher, executor, types
from config import BOT_TOKEN
from keyboards import start_kb, answers_kb
from gpt import generate_version_text

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è —Ç—ã —Å–µ–π—á–∞—Å –≤–µ—Ä—Å–∏—è —Å–µ–±—è. –ì–æ—Ç–æ–≤?",
        reply_markup=start_kb
    )

@dp.message_handler(lambda message: message.text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ—é –≤–µ—Ä—Å–∏—é")
async def ask_question(message: types.Message):
    await message.answer("–û–∫–µ–π, –Ω–∞—á–Ω—ë–º! –ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –ø–æ —É—Ç—Ä–∞–º?", reply_markup=answers_kb)

@dp.message_handler(lambda message: message.text in ["‚òï –ö–æ—Ñ–µ", "üíª –†–∞–±–æ—Ç–∞", "Ô∏è –°–æ–Ω"])
async def show_version(message: types.Message):
    user_choice = message.text
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–≤–æ—é –≤–µ—Ä—Å–∏—é... –ñ–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.")
    result = await generate_version_text(user_choice)
    await message.answer(result, reply_markup=start_kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
